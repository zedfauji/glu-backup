
import org.linkedin.glu.agent.api.ShellExecException
import org.linkedin.glu.agent.api.ScriptExecutionException
import org.linkedin.glu.agent.api.ScriptExecutionCauseException

class StartStop
{
def appState = "..."
def servState = "..."
public void safeuninstall()
{
ScriptExecutionCauseException ex = scriptShouldFail {
      uninstall()
    }
}



public void safeinstall()
{
ScriptExecutionCauseException xz = scriptShouldFail {
	install()
	}
}
public void safestart()
{
ScriptExecutionCauseException xz = scriptShouldFail {
        start()
        }
}


  def install = {
    log.info "Installing..."
try{
    shell.exec("sh /cacheDir/glu_scripts/service_install.sh ${params.service} ${params.version} ${params.port}")}
catch (ShellExecException u)
    {
      return null
    }

	servState = "Installed"

        timers.schedule(timer: monitor, repeatFrequency: "5s")
  }

  def configure = {
    log.info "Nothing to Configure as such."
    shell.exec("sleep 5")
	servState = "Configured"
  }

  def start = {
    log.info "Starting service"
        shell.exec("sh /cacheDir/glu_scripts/service_start.sh ${params.service} ${params.version} ${params.port}")
        log.info "current state is ${state}"
	servState = "Started"
/*      monitor()*/
}

  def stop = {
    log.info "Stopping Service"
        shell.exec("sh /cacheDir/glu_scripts/service_stop.sh ${params.service} ${params.port}")
        log.info "current state is ${state}"
	servState = "Stopped"
  }

  def unconfigure = {
    log.info "Nothing to UnConfigure as such."
	servState = "Unconfigured"
  }

  def uninstall = {
    log.info "Uninstalling..."
        shell.exec("sh /cacheDir/glu_scripts/service_uninstall.sh ${params.service} ${params.version}")

        timers.cancel(timer: monitor)
	servState = "Uninstalled"
  }

def monitor = {

try
{
def currentState = stateManager.state.currentState
def currentError = stateManager.state.error

def newState = null
def newError = null

/*try {
*/
def output= shell.exec("sh /cacheDir/glu_scripts/service_monitor.sh ${params.service} ${params.port}")
/*}
catch (ShellExecException u)
    {
      return null
    }
*/
shell.waitFor(timeout: '5s', heartbeat: '10s') { duration ->
log.info "${output}"
log.info "Waiting for service to be down"
log.info "step 1"
         if(output == 'null')
                {
                        newState = 'stopped'
                        newError = 'Service has been stopped. Check Log Files'
                        log.warn "${newError} => forcing new state ${newState}"
                }
                else
                {
                        newState = 'running'
                        log.info "Service is running"
                }
        if(newState)
        {
                stateManager.forceChangeState(newState, newError)
              log.debug "Server Monitor: ${stateManager.state.currentState}"
        }

log.info " pid matched running "
log.info "{pid}"
                                        }
}
catch(Throwable th)
    {
      log.warn "Exception while running serverMonitor: ${th.message}"
      log.debug("Exception while running serverMonitor (ignored)", th)

	}
}

}

