
import org.linkedin.glu.agent.api.ShellExecException
import org.linkedin.glu.agent.api.ScriptExecutionException
import org.linkedin.glu.agent.api.ScriptExecutionCauseException

class StartStop
{
def appState = "..."
def servState = "..."
public void safeuninstall()
{
ScriptExecutionCauseException ex = scriptShouldFail {
      uninstall()
    }
}



/*public void safeinstall()
{
ScriptExecutionCauseException xz = scriptShouldFail {
	install()
	}
}*/
/*public void safestart()
{
ScriptExecutionCauseException xz = scriptShouldFail {
        start()
        }
}*/


  def install = {
    log.info "Installing..."
	log.info "Install Phase started"
try{
    shell.exec("sh /cacheDir/glu_scripts/service_install.sh ${params.service} ${params.version} ${params.port} >> /dev/null  2>&1")
}
catch (ShellExecException u)
    {
      return null
    }

	servState = "Installed"

//        timers.schedule(timer: "monitor", repeatFrequency: "1s")
	log.info "Service successfully installed and monitoring initiated"
	log.debug "Service successfully installed and monitoring initiated"
  }

  def configure = {
	log.info "Configure phse started "
    log.info "Nothing to Configure as such."
    shell.exec("sleep 5")
	servState = "Configured"
  }

  def start = {
    log.info "Starting service"
	log.info "running script service_start for ${params.service} version ${params.version} on ${params.port}"
        shell.exec("sh /cacheDir/glu_scripts/service_start.sh ${params.service} ${params.version} ${params.port}")
        log.info "current state is ${state}"
	servState = "Started"
	timers.schedule(timer: "monitor", repeatFrequency: "1s")
     /* monitor() */
}

  def stop = {
    log.info "Stopping Service"
	log.info "stop Phase started"
        shell.exec("sh /cacheDir/glu_scripts/service_stop.sh ${params.service} ${params.port}")
        log.info "current state is ${state}"
	servState = "Stopped"
	timers.cancel(timer: "monitor")
  }

  def unconfigure = {
	log.info "Unconfigure Phase started"
    log.info "Nothing to UnConfigure as such."
	servState = "Unconfigured"
	 timers.cancel(timer: "monitor")
	log.info "cancelled timer of ${mountPoint}"
  }

  def uninstall = {
    log.info "Uninstalling..."
	log.info "UnInstall Phase started"
//	timers.cancel(timer: "monitor")
        shell.exec("sh /cacheDir/glu_scripts/service_uninstall.sh ${params.service} ${params.version}")

	servState = "Uninstalled"
  }



def monitor = {

try
{
def currentState = stateManager.state.currentState
def currentError = stateManager.state.error
log.warn "${currentState}"
log.warn "${currentError}"
def newState = null
def newError = null

/*try {
*/
//def output= shell.exec("sh /cacheDir/glu_scripts/service_monitor.sh ${params.service} ${params.port}")
/*}
catch (ShellExecException u)
    {
      return null
    }
*/
shell.waitFor(timeout: '5s', heartbeat: '2s'){ duration ->
def output= shell.exec("sh /cacheDir/glu_scripts/service_monitor.sh ${params.service} ${params.port}") 
log.info "${output}"
log.info "Waiting for service to be down"
log.info "step 1"
         if(output == 'null')
                {
                        newState = 'stopped'
                        newError = 'Service has been stopped. Check Log Files'
                        log.warn "${newError} => forcing new state ${newState}"
                }
                else
                {
                        newState = 'running'
                        log.info "Service is running"
                }
        if(newState)
        {
                stateManager.forceChangeState(newState, newError)
              log.debug "Server Monitor: ${stateManager.state.currentState}"
        }

log.info " pid matched running "
log.info "{pid}"
                                        }
}
catch(Throwable th)
    {
      log.warn "Exception while running serverMonitor: ${th.message}"
      log.debug("Exception while running serverMonitor (ignored)", th)

	}
}


}

